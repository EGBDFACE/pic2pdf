{"version":3,"sources":["util/tools.ts","components/upload.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["fileObjToFile","fileObj","result","File","name","type","uid","Blob","message","error","console","err","log","getCommonString","firstS","secondS","dp","i","length","Array","fill","ans","as","j","substr","getFileName","filename","last","lastIndexOf","slice","undefined","replace","trim","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","img","Image","src","String","resolveResult","imgUrlBase64","imgWidth","width","imgHeight","height","canvasEle","document","createElement","canvasContext","getContext","drawImage","onerror","PicturesWall","state","previewVisible","previewImage","previewTitle","fileList","pdfFileName","handleCancel","setState","handlePreview","a","url","preview","originFileObj","data","handleRemove","some","ele","index","splice","handleUpload","param","map","v","includes","commonName","_getPdfData","info","pdfData","transImgData","push","handleOutputWithImg","pdf","jsPDF","forEach","addPage","addImage","warning","save","handleFileName","e","persist","target","value","this","uploadButton","PlusOutlined","style","marginTop","className","multiple","listType","onPreview","customRequest","onRemove","visible","title","footer","onCancel","alt","placeholder","maxLength","size","prefix","FilePdfOutlined","onChange","onPressEnter","onClick","shape","icon","DownloadOutlined","React","Component","App","subTitle","backIcon","extra","href","rel","GithubOutlined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b24f6619.chunk.js","sourcesContent":["import { message } from \"antd\";\nimport { RcFile } from \"antd/lib/upload\";\n\nexport function fileObjToFile (fileObj: any) : RcFile | undefined {\n\n  try {\n    const result: any = new File([fileObj], fileObj.name, { type: fileObj.type })\n    result.uid = fileObj.uid\n    \n    if (!(fileObj instanceof Blob) && !(fileObj instanceof File)) {\n      message.error('some error happen')\n      console.error(`fileObjToFile wrong: \\n fileObj \\n ${fileObj}`)\n      return\n    }\n\n    return result\n    \n  } catch (err) {\n    console.log(err)\n  }\n}\n\nexport function getCommonString (firstS: string, secondS: string) : string {\n  let dp = []\n  for (let i=0; i<=firstS.length; i++) { // 注意这里数组的大小\n    dp[i] = new Array(secondS.length+1)\n    dp[i].fill(0)\n  }\n  let ans = 0, as = 0;\n  for (let i=firstS.length-1; i>=0; i--) {\n    for (let j=secondS.length-1; j>=0; j--) {\n      dp[i][j] = firstS[i] === secondS[j] ? dp[i+1][j+1]+1 : 0\n      if (ans < dp[i][j]) {\n        ans = dp[i][j]\n        as = i\n      }\n    }\n  }\n  return firstS.substr(as, ans)\n}\n\nexport function getFileName (filename: string) : string {\n  let last = filename.lastIndexOf('.');\n  // 将特殊字符换成空格\n  return filename.slice(0, last === -1 ? undefined : last)\n    .replace(/[^a-zA-Z0-9\\u4e00-\\u9fa5]/g, ' ')\n    .trim()\n}","import React from 'react';\nimport { Button, Input, Upload, Modal, message } from 'antd';\nimport { DownloadOutlined, FilePdfOutlined, PlusOutlined } from '@ant-design/icons';\nimport { UploadFile, RcCustomRequestOptions } from 'antd/lib/upload/interface';\n\nimport { jsPDF } from 'jspdf';\n\nimport { fileObjToFile, getCommonString, getFileName } from '../util/tools'\nimport { IPDFPageObj } from '../util/type';\n\nimport './upload.css';\n\nfunction getBase64(file: File | Blob | undefined) : Promise<IPDFPageObj | undefined>{\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    if (!file) {\n      console.log(file);\n      message.error('file load fail');\n      return resolve()\n    }\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const img = new Image()\n      img.src = String(reader.result)\n      img.onload = () => {\n        const resolveResult = {\n          imgUrlBase64: String(reader.result),\n          imgWidth: img.width,\n          imgHeight: img.height,\n          canvasEle: undefined\n        }\n        const canvasEle = document.createElement('canvas');\n        const canvasContext = canvasEle.getContext('2d');\n        canvasEle.width=img.width;\n        canvasEle.height=img.height;\n        if (canvasContext) {\n          canvasContext.drawImage(img, 0, 0);\n          return resolve({\n            ...resolveResult,\n            canvasEle\n          })\n        }\n        return resolve(resolveResult);\n      }\n    }\n    reader.onerror = error => reject(error);\n  });\n}\n\nexport class PicturesWall extends React.Component {\n  state = {\n    previewVisible: false,\n    previewImage: '',\n    previewTitle: '',\n    fileList: [],\n    pdfFileName: ''\n  };\n\n  handleCancel = () => this.setState({ previewVisible: false });\n  // 点击预览\n  handlePreview = async (file: UploadFile) => {\n    if (!file.url && !file.preview) {\n      const data = await getBase64(file.originFileObj);\n      file.preview = data?.imgUrlBase64 || ''\n    }\n    this.setState({\n      previewImage: file.url || file.preview,\n      previewVisible: true,\n      previewTitle: file.name,\n    });\n  };\n\n  // 点击移除\n  handleRemove = (file: UploadFile) => {\n    const fileList = [...this.state.fileList];\n    let i: number = -1;\n    fileList.some((ele: UploadFile, index) => {\n      if (ele.uid === file.uid) {\n        i = index;\n        return true;\n      }\n      return false\n    })\n    if (i === -1) {\n      message.error('could not find index')\n      return\n    }\n    fileList.splice(i,1)\n    this.setState({ fileList })\n  }\n\n  // 自定义上传逻辑\n  handleUpload = (param: RcCustomRequestOptions) => {\n    const file: UploadFile = param.file\n    const { fileList, pdfFileName } = this.state\n    const uidList = fileList.map((v: UploadFile) => v.uid)\n    if (uidList.includes(file.uid)) return\n    if (!fileObjToFile(file)) return;\n    file.originFileObj = fileObjToFile(file);\n    const commonName = pdfFileName ? getCommonString(pdfFileName, getFileName(file.name)) : getFileName(file.name);\n    this.setState({ \n      fileList: [...fileList, file],\n      pdfFileName: commonName.trim()\n    })\n  }\n\n  _getPdfData = async (): Promise<IPDFPageObj[]> => {\n    const { fileList } = this.state\n    if (fileList.length < 1) {\n      message.info('please upload one pic at lease')\n      return []\n    }\n    const pdfData: IPDFPageObj[] = []\n    for (let i=0; i<fileList.length; i++) {\n      const transImgData = await getBase64(fileList[i])\n      if (transImgData) {\n        pdfData.push(transImgData)\n      }\n    }\n    return pdfData\n  }\n\n  handleOutputWithImg = async () => {\n    const pdfData: IPDFPageObj[] = await this._getPdfData()\n    if (pdfData.length < 1) return\n\n    try {\n      const pdf = new jsPDF('p', 'px', [pdfData[0].imgWidth, pdfData[0].imgHeight])\n      pdfData.forEach((v,i) => {\n        if (i !== 0) pdf.addPage([v.imgWidth, v.imgHeight])\n        if (v.canvasEle) {\n          pdf.addImage(v.canvasEle, 0, 0, v.imgWidth, v.imgHeight)\n        } else {\n          message.warning('webp pic may have some unknow problem here, please change chrome to have a try')\n          pdf.addImage(v.imgUrlBase64, 0, 0, v.imgWidth, v.imgHeight);\n        }\n      })\n      pdf.save(this.state.pdfFileName)\n    } catch (err) {\n      console.log(err)\n      message.error('some unknown errors happen')\n    }\n  }\n\n  handleFileName = (e: any) => {\n    e.persist();\n    this.setState({ pdfFileName: e.target.value })\n  }\n\n  render() {\n    const { previewVisible, previewImage, fileList, previewTitle, pdfFileName } = this.state;\n    const uploadButton = (\n      <div>\n        <PlusOutlined />\n        <div style={{ marginTop: 8 }}><p>Add pic</p><p>click or drag</p></div>\n      </div>\n    );\n    return (\n      <>\n        <Upload\n          className=\"pic-upload\"\n          multiple\n          listType=\"picture-card\"\n          fileList={fileList}\n          onPreview={this.handlePreview}\n          customRequest={this.handleUpload}\n          onRemove={this.handleRemove}\n        >\n          {fileList.length >= 108 ? null : uploadButton}\n        </Upload>\n        <Modal\n          visible={previewVisible}\n          title={previewTitle}\n          footer={null}\n          onCancel={this.handleCancel}\n        >\n          <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n        </Modal>\n        <div>          \n          <Input placeholder=\"pdf filename\"\n            maxLength={25}\n            value={pdfFileName}\n            size=\"large\"\n            prefix={<FilePdfOutlined />}\n            className=\"pdf-filename-input\"\n            // style={{width: '150px', marginRight: '10px'}}\n            onChange={this.handleFileName}\n            onPressEnter={this.handleOutputWithImg}\n          />\n          <Button type=\"primary\"\n            onClick={this.handleOutputWithImg}\n            shape=\"round\"\n            icon={<DownloadOutlined />}\n            size=\"large\"\n            >Get PDF</Button>\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\n// import { Button } from 'antd';\n// import logo from './logo.svg';\nimport { PicturesWall } from './components/upload';\nimport { PageHeader, Card } from 'antd';\nimport 'antd/dist/antd.css'\nimport './App.css';\nimport { GithubOutlined } from '@ant-design/icons';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageHeader\n        className=\"site-page-header\"\n        title=\"pics2pdf\"\n        subTitle=\"convert multiple pictures to pdf file Locally\"\n        backIcon={false}\n        extra={[\n        <a href=\"https://github.com/EGBDFACE/pic2pdf\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          ><GithubOutlined /></a>\n        ]}\n      />\n      <PicturesWall />\n      <div className=\"tipInfo\">\n        <Card title=\"* support picture format (theoretically)\"\n          className=\"tipInfoContent\"\n          extra={\n            <a href=\"https://artskydj.github.io/jsPDF/docs/modules_addimage.js.html\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >More</a>\n          }\n          style={{ width: 400}}>\n            <p>jpeg</p>\n            <p>png</p>\n            <p>bmp</p>\n            <p>webp</p>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}