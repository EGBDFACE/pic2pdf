{"version":3,"sources":["util/tools.ts","components/upload.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["fileObjToFile","fileObj","result","File","name","type","uid","Blob","message","error","console","err","log","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","img","Image","src","String","imgUrlBase64","imgWidth","this","width","imgHeight","height","onerror","PicturesWall","state","previewVisible","previewImage","previewTitle","fileList","pdfFileName","handleCancel","setState","handlePreview","a","url","preview","originFileObj","data","handleRemove","i","some","ele","index","splice","handleUpload","param","map","v","includes","_getPdfData","length","pdfData","transImgData","push","handleOutputWithImg","pdf","jsPDF","forEach","addPage","addImage","save","handleFileName","e","persist","target","value","uploadButton","PlusOutlined","style","marginTop","multiple","listType","onPreview","customRequest","onRemove","visible","title","footer","onCancel","alt","placeholder","maxLength","marginRight","onChange","onClick","React","Component","App","className","subTitle","backIcon","extra","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.82934d52.chunk.js","sourcesContent":["import { message } from \"antd\";\nimport { RcFile } from \"antd/lib/upload\";\n\nexport function fileObjToFile (fileObj: any) : RcFile | undefined {\n\n  try {\n    const result: any = new File([fileObj], fileObj.name, { type: fileObj.type })\n    result.uid = fileObj.uid\n    \n    if (!(fileObj instanceof Blob) && !(fileObj instanceof File)) {\n      message.error('some error happen')\n      console.error(`fileObjToFile wrong: \\n fileObj \\n ${fileObj}`)\n      return\n    }\n\n    return result\n    \n  } catch (err) {\n    console.log(err)\n  }\n}","import React from 'react';\nimport { Button, Input, Upload, Modal, message } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { UploadFile, RcCustomRequestOptions } from 'antd/lib/upload/interface';\n\nimport { jsPDF } from 'jspdf';\n\nimport { fileObjToFile } from '../util/tools'\nimport { IPDFPageObj } from '../util/type';\n\nfunction getBase64(file: File | Blob | undefined) : Promise<IPDFPageObj> | undefined{\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    if (!file) {\n      console.log(file);\n      message.error('unknown type file');\n      return;\n    }\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const img = new Image()\n      img.src = String(reader.result)\n      img.onload = function (){\n        const that : any = this\n        return resolve({\n          imgUrlBase64 : String(reader.result),\n          imgWidth: that.width,\n          imgHeight: that.height\n        });\n      }\n    }\n    reader.onerror = error => reject(error);\n  });\n}\n\nexport class PicturesWall extends React.Component {\n  state = {\n    previewVisible: false,\n    previewImage: '',\n    previewTitle: '',\n    fileList: [],\n    pdfFileName: 'new'\n  };\n\n  handleCancel = () => this.setState({ previewVisible: false });\n  // 点击预览\n  handlePreview = async (file: UploadFile) => {\n    if (!file.url && !file.preview) {\n      const data = await getBase64(file.originFileObj);\n      file.preview = data?.imgUrlBase64 || ''\n    }\n    this.setState({\n      previewImage: file.url || file.preview,\n      previewVisible: true,\n      previewTitle: file.name,\n    });\n  };\n\n  // 点击移除\n  handleRemove = (file: UploadFile) => {\n    const fileList = [...this.state.fileList];\n    let i: number = -1;\n    fileList.some((ele: UploadFile, index) => {\n      if (ele.uid === file.uid) {\n        i = index;\n        return true;\n      }\n      return false\n    })\n    if (i === -1) {\n      message.error('could not find index')\n      return\n    }\n    fileList.splice(i,1)\n    this.setState({ fileList })\n  }\n\n  // 自定义上传逻辑\n  handleUpload = (param: RcCustomRequestOptions) => {\n    const file: UploadFile = param.file\n    const { fileList } = this.state\n    const uidList = fileList.map((v: UploadFile) => v.uid)\n    if (uidList.includes(file.uid)) return\n    if (!fileObjToFile(file)) return;\n    file.originFileObj = fileObjToFile(file)\n    console.log(file)\n    this.setState({ fileList: [...fileList, file] })\n  }\n\n  _getPdfData = async (): Promise<IPDFPageObj[]> => {\n    const { fileList } = this.state\n    if (fileList.length < 1) return []\n    const pdfData: IPDFPageObj[] = []\n    for (let i=0; i<fileList.length; i++) {\n      const transImgData = await getBase64(fileList[i])\n      if (transImgData) {\n        pdfData.push(transImgData)\n      }\n    }\n    return pdfData\n  }\n\n  handleOutputWithImg = async () => {\n    const pdfData: IPDFPageObj[] = await this._getPdfData()\n    if (pdfData.length < 1) return\n\n    try {\n      const pdf = new jsPDF('p', 'px', [pdfData[0].imgWidth, pdfData[0].imgHeight])\n      pdfData.forEach((v,i) => {\n        if (i !== 0) pdf.addPage([v.imgWidth, v.imgHeight])\n        pdf.addImage(v.imgUrlBase64, 0, 0, v.imgWidth, v.imgHeight)\n      })\n      pdf.save(this.state.pdfFileName)\n    } catch (err) {\n      console.log(err)\n      message.error('some unknown errors happen')\n    }\n  }\n\n  handleFileName = (e: any) => {\n    e.persist();\n    this.setState({ pdfFileName: e.target.value || 'new' })\n  }\n\n  render() {\n    const { previewVisible, previewImage, fileList, previewTitle } = this.state;\n    const uploadButton = (\n      <div>\n        <PlusOutlined />\n        <div style={{ marginTop: 8 }}><p>Add pic</p><p>click or drag</p></div>\n      </div>\n    );\n    return (\n      <>\n        <Upload\n          multiple\n          listType=\"picture-card\"\n          fileList={fileList}\n          onPreview={this.handlePreview}\n          customRequest={this.handleUpload}\n          onRemove={this.handleRemove}\n        >\n          {fileList.length >= 108 ? null : uploadButton}\n        </Upload>\n        <Modal\n          visible={previewVisible}\n          title={previewTitle}\n          footer={null}\n          onCancel={this.handleCancel}\n        >\n          <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n        </Modal>\n        <div>          \n          <Input placeholder=\"pdf filename\"\n            maxLength={25}\n            style={{width: '150px', marginRight: '10px'}}\n            onChange={this.handleFileName}\n          />\n          <Button type=\"primary\" onClick={this.handleOutputWithImg}>Get PDF</Button>\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\n// import { Button } from 'antd';\n// import logo from './logo.svg';\nimport { PicturesWall } from './components/upload';\nimport { PageHeader, Card } from 'antd';\nimport 'antd/dist/antd.css'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageHeader\n        className=\"site-page-header\"\n        title=\"pics2pdf\"\n        subTitle=\"convert multiple pictures to pdf file\"\n        backIcon={false}\n      />\n      <PicturesWall />\n      <div className=\"tipInfo\">\n        <Card title=\"* support picture format (theoretically)\"\n          className=\"tipInfoContent\"\n          extra={<a href=\"https://artskydj.github.io/jsPDF/docs/modules_addimage.js.html\" target=\"_blank\" rel=\"noopener noreferrer\">More</a>}\n          style={{ width: 400}}>\n            <p>jpeg</p>\n            <p>png</p>\n            <p>bmp</p>\n            <p>webp (working on it)</p>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}